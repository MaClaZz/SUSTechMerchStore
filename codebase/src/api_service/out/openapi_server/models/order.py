from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, user_id=None, product_id=None, quantity=None, total_price=None, created_at=None):  # noqa: E501
        """Order - a model defined in OpenAPI

        :param id: The id of this Order.  # noqa: E501
        :type id: int
        :param user_id: The user_id of this Order.  # noqa: E501
        :type user_id: int
        :param product_id: The product_id of this Order.  # noqa: E501
        :type product_id: int
        :param quantity: The quantity of this Order.  # noqa: E501
        :type quantity: int
        :param total_price: The total_price of this Order.  # noqa: E501
        :type total_price: float
        :param created_at: The created_at of this Order.  # noqa: E501
        :type created_at: datetime
        """
        self.openapi_types = {
            'id': int,
            'user_id': int,
            'product_id': int,
            'quantity': int,
            'total_price': float,
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'product_id': 'productId',
            'quantity': 'quantity',
            'total_price': 'total_price',
            'created_at': 'created_at'
        }

        self._id = id
        self._user_id = user_id
        self._product_id = product_id
        self._quantity = quantity
        self._total_price = total_price
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: int
        """

        self._id = id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Order.


        :return: The user_id of this Order.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Order.


        :param user_id: The user_id of this Order.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def product_id(self) -> int:
        """Gets the product_id of this Order.


        :return: The product_id of this Order.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this Order.


        :param product_id: The product_id of this Order.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Order.


        :return: The quantity of this Order.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Order.


        :param quantity: The quantity of this Order.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def total_price(self) -> float:
        """Gets the total_price of this Order.


        :return: The total_price of this Order.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: float):
        """Sets the total_price of this Order.


        :param total_price: The total_price of this Order.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Order.


        :return: The created_at of this Order.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Order.


        :param created_at: The created_at of this Order.
        :type created_at: datetime
        """

        self._created_at = created_at
