# write sth here.  Generate Flask server code template via OpenAPI Generator.
openapi: 3.0.0
info:
  title: SUSTech Merch Store API
  version: 1.0.0
paths:
  /:
# (a)A Greeting API that returns a welcome message at the base URL.
    get:
      summary: Greeting API
      responses:
        '200':
          description: A greeting message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to the SUSTech Merch Store API!"

# (b) list-products and get-product operations for products.
  /list-products:
    get:
      summary: List all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "product-001"
                    name:
                      type: string
                      example: "T-shirt"
                    price:
                      type: number
                      example: 19.99
                    stock:
                      type: integer
                      example: 100
  /get-product/{productId}:
    get:
      summary: Get product details
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "product-001"
                  name:
                    type: string
                    example: "T-shirt"
                  price:
                    type: number
                    example: 19.99
                  stock:
                    type: integer
                    example: 100
        '404':
          description: Product not found
# (c) register, deactivate-user, get-user, update-user, login for users.
  /register:
    post:
      summary: Register a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
#              type: object
#              properties:
#                username:
#                  type: string
#                  example: "johndoe"
#                email:
#                  type: string
#                  example: "johndoe@example.com"
#                password:
#                  type: string
#                  example: "password123"
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Invalid input
#protected
  /deactivate-user:
    post:
      summary: Deactivate a user account
      requestBody:
        description: User deactivation details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "user-123"
      responses:
        '200':
          description: User successfully deactivated
        '404':
          description: User not found

  /get-user/{userId}:
    get:
      summary: Get user details
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "user-123"
                  username:
                    type: string
                    example: "johndoe"
                  email:
                    type: string
                    example: "johndoe@example.com"
        '404':
          description: User not found

  /update-user:
    put:
      summary: Update user details
      requestBody:
        description: Updated user details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "user-123"
                email:
                  type: string
                  example: "newemail@example.com"
                username:
                  type: string
                  example: "newusername"
      responses:
        '200':
          description: User successfully updated
        '404':
          description: User not found

  /login:
    post:
      summary: Log in a user
      security:
        - jwt: []
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "johndoe@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  # (d) place-order, cancel-order, get-order for orders.
  /place-order:
    post:
      summary: Place an order
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "user-123"
                productId:
                  type: string
                  example: "product-001"
                quantity:
                  type: integer
                  example: 2
      responses:
        '201':
          description: Order successfully placed
        '400':
          description: Invalid input

  /cancel-order/{orderId}:
    post:
      summary: Cancel an order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to cancel
          schema:
            type: string
      responses:
        '200':
          description: Order successfully canceled
        '404':
          description: Order not found

  /get-order/{orderId}:
    get:
      summary: Get order details
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "order-001"
                  userId:
                    type: string
                    example: "user-123"
                  productId:
                    type: string
                    example: "product-001"
                  quantity:
                    type: integer
                    example: 2
        '404':
          description: Order not found

components:
  securitySchemes:
    BearerAuth:   # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
          description: a password field
      required:
        - username
        - password

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
          description: a password field
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token passed back to the client

    ProtectedData:
      type: object
      properties:
        message:
          type: string
