openapi: 3.0.1
info:
  title: SUSTech Merch Store API
  description: API for managing users, products, and orders with JWT authentication.
  version: 1.0.0

paths:
  # (a) A Greeting API that returns a welcome message at the base URL.
  /:
    get:
      summary: Greeting API
      description: Returns a welcome message at the base URL.
      responses:
        200:
          description: A greeting message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to the SUSTech Merch Store API!"

  # (b) Product Operations:list-products and get-product operations for products.
  /products:
    get:
      summary: List all products
      responses:
        200:
          description: List of all available products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{productId}:
    get:
      summary: Get details of a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            description: Product ID
      responses:
        200:
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found

  # (c) User Operations:register, deactivate-user, get-user, update-user, login for users.
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          description: User registered successfully
        400:
          description: Registration failed

  /login:
    post:
      summary: Authenticate and get a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successfully authenticated, token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          description: Unauthorized

  /users/{userId}:
    get:
      summary: Get user details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            #type: string
            type: integer
            description: User ID
      security:
        - BearerAuth: []  # JWT authentication required
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized

    put:
      summary: Update user information
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            #type: string
            type: integer
            description: User ID
      security:
        - BearerAuth: []  # JWT authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: User updated successfully
        400:
          description: Bad Request - Invalid data
        401:
          description: Unauthorized - Missing or invalid JWT
        404:
          description: User not found

  /users/{userId}/deactivate:
    post:
      summary: Deactivate a user account
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            #type: string
            type: integer
            description: User ID
      security:
        - BearerAuth: []  # JWT authentication required
      responses:
        200:
          description: User deactivated successfully
        400:
          description: Bad Request - Invalid data
        401:
          description: Unauthorized - Missing or invalid JWT
        404:
          description: User not found

  # (d) Order Operations: place-order, cancel-order, get-order for orders.
  /orders:
    post:
      summary: Place a new order
      security:
        - BearerAuth: []  # JWT authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        201:
          description: Order placed successfully
        400:
          description: Bad Request - Invalid order data
        401:
          description: Unauthorized - Missing or invalid JWT

  /orders/{orderId}:
    get:
      summary: Get order details
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            #type: string
            type: integer
            description: Order ID
      security:
        - BearerAuth: []  # JWT authentication required
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized

    delete:
      summary: Cancel an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            #type: string
            type: integer
            description: Order ID
      security:
        - BearerAuth: []  # JWT authentication required
      responses:
        200:
          description: Order canceled successfully
        401:
          description: Unauthorized - Missing or invalid JWT
        404:
          description: Order not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
          format: float
        slogan:
          type: string
        stock:
          type: integer
        created_at:
          type: string
          format: date-time

    RegisterRequest:
      type: object
      properties:
        sid:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token returned to the client

    User:
      type: object
      properties:
        id:
          type: integer
        sid:
          type: string
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        sid:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string

    OrderRequest:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        total_price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time