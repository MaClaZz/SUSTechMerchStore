# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import assistant_pb2 as assistant__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in assistant_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AssistantServiceStub(object):
    """Stlye Guide: https://protobuf.dev/programming-guides/style/.
    Files should be named `lower_snake_case.proto`.


    Services are what the servers provide for the clients. Specifically for gRPC.
    Use PascalCase (with an initial capital) for both the service name and any RPC method names.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TellStory = channel.unary_stream(
                '/AssistantService/TellStory',
                request_serializer=assistant__pb2.TellStoryRequest.SerializeToString,
                response_deserializer=assistant__pb2.TellStoryResponse.FromString,
                _registered_method=True)


class AssistantServiceServicer(object):
    """Stlye Guide: https://protobuf.dev/programming-guides/style/.
    Files should be named `lower_snake_case.proto`.


    Services are what the servers provide for the clients. Specifically for gRPC.
    Use PascalCase (with an initial capital) for both the service name and any RPC method names.
    """

    def TellStory(self, request, context):
        """Tells a story by streaming the story text.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssistantServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TellStory': grpc.unary_stream_rpc_method_handler(
                    servicer.TellStory,
                    request_deserializer=assistant__pb2.TellStoryRequest.FromString,
                    response_serializer=assistant__pb2.TellStoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AssistantService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('AssistantService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AssistantService(object):
    """Stlye Guide: https://protobuf.dev/programming-guides/style/.
    Files should be named `lower_snake_case.proto`.


    Services are what the servers provide for the clients. Specifically for gRPC.
    Use PascalCase (with an initial capital) for both the service name and any RPC method names.
    """

    @staticmethod
    def TellStory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/AssistantService/TellStory',
            assistant__pb2.TellStoryRequest.SerializeToString,
            assistant__pb2.TellStoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
